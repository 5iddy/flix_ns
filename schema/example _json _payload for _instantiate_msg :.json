{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Example Json Payload for InstantiateMsg :",
  "description": "```json { \"purchase_price\": { \"amount\":\"100\", \"denom\":\"ujunox\" }, \"transfer_price\": { \"amount\":\"100\", \"denom\":\"ujunox\" } } ```",
  "type": "object",
  "properties": {
    "admin": {
      "description": "The admin will be able to toggle the sale flag",
      "type": [
        "string",
        "null"
      ]
    },
    "purchase_price": {
      "description": "The price for registering the name",
      "anyOf": [
        {
          "$ref": "#/definitions/Coin"
        },
        {
          "type": "null"
        }
      ]
    },
    "sale_flag": {
      "description": "When the sale flag is true, people will be able to buy/register a name for their wallet",
      "type": [
        "boolean",
        "null"
      ]
    },
    "transfer_price": {
      "description": "The price for transfering the name to a different wallet",
      "anyOf": [
        {
          "$ref": "#/definitions/Coin"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
